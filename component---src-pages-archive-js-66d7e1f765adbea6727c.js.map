{"version":3,"sources":["webpack://v4/./src/pages/archive.js"],"names":["StyledTableContainer","styled","theme","mixins","flexCenter","location","projects","data","allMarkdownRemark","edges","revealTitle","useRef","revealTable","revealProjects","prefersReducedMotion","usePrefersReducedMotion","useState","isShowLightBox","setShowLightBox","selectedImage","setSelectedImage","useEffect","sr","current","srConfig","forEach","ref","i","title","className","length","map","node","frontmatter","html","date","github","external","ios","android","tech","company","image","key","el","Date","getFullYear","item","onClick","description","setActiveImage","name","href","imageTitle","imageCaption","dangerouslySetInnerHTML","__html","handleClose","handleNextRequest","handlePrevRequest"],"mappings":"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","file":"component---src-pages-archive-js-66d7e1f765adbea6727c.js","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport { graphql } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport { Helmet } from 'react-helmet';\nimport styled from 'styled-components';\nimport { srConfig } from '@config';\nimport sr from '@utils/sr';\nimport { Layout } from '@components';\nimport { Icon } from '@components/icons';\nimport LightBox from \"../components/lightbox\"\nimport { usePrefersReducedMotion } from '@hooks';\n\nconst StyledTableContainer = styled.div`\n  margin: 100px -20px;\n\n  @media (max-width: 768px) {\n    margin: 50px -10px;\n  }\n\n  table {\n    width: 100%;\n    border-collapse: collapse;\n\n    .hide-on-mobile {\n      @media (max-width: 768px) {\n        display: none;\n      }\n    }\n\n    tbody tr {\n      &:hover,\n      &:focus {\n        background-color: var(--light-navy);\n      }\n    }\n\n    th,\n    td {\n      padding: 10px;\n      text-align: left;\n\n      &:first-child {\n        padding-left: 20px;\n\n        @media (max-width: 768px) {\n          padding-left: 10px;\n        }\n      }\n      &:last-child {\n        padding-right: 20px;\n\n        @media (max-width: 768px) {\n          padding-right: 10px;\n        }\n      }\n\n      svg {\n        width: 20px;\n        height: 20px;\n      }\n    }\n\n    tr {\n      cursor: default;\n\n      td:first-child {\n        border-top-left-radius: var(--border-radius);\n        border-bottom-left-radius: var(--border-radius);\n      }\n      td:last-child {\n        border-top-right-radius: var(--border-radius);\n        border-bottom-right-radius: var(--border-radius);\n      }\n    }\n\n    td {\n      &.year {\n        padding-right: 20px;\n\n        @media (max-width: 768px) {\n          padding-right: 10px;\n          font-size: var(--fz-sm);\n        }\n      }\n\n      &.title {\n        padding-top: 15px;\n        padding-right: 20px;\n        color: var(--lightest-slate);\n        font-size: var(--fz-xl);\n        font-weight: 600;\n        line-height: 1.25;\n      }\n\n      &.company {\n        font-size: var(--fz-lg);\n        white-space: nowrap;\n      }\n\n      &.tech {\n        font-size: var(--fz-xxs);\n        font-family: var(--font-mono);\n        line-height: 1.5;\n        .separator {\n          margin: 0 5px;\n        }\n        span {\n          display: inline-block;\n        }\n      }\n\n      &.links {\n        min-width: 100px;\n\n        div {\n          display: flex;\n          align-items: center;\n\n          a {\n            ${({ theme }) => theme.mixins.flexCenter};\n            flex-shrink: 0;\n          }\n\n          a + a {\n            margin-left: 10px;\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst ArchivePage = ({ location, data }) => {\n  const projects = data.allMarkdownRemark.edges;\n  const revealTitle = useRef(null);\n  const revealTable = useRef(null);\n  const revealProjects = useRef([]);\n  const prefersReducedMotion = usePrefersReducedMotion();\n  const [isShowLightBox, setShowLightBox] = useState(false);\n  const [selectedImage, setSelectedImage] = useState(null)\n\n\n  useEffect(() => {\n    if (prefersReducedMotion) {\n      return;\n    }\n\n    sr.reveal(revealTitle.current, srConfig());\n    sr.reveal(revealTable.current, srConfig(200, 0));\n    revealProjects.current.forEach((ref, i) => sr.reveal(ref, srConfig(i * 10)));\n  }, []);\n\n  function setActiveImage({ image, title, description }) {\n    setShowLightBox(true)\n    setSelectedImage({ image, title, description })\n  }\n\n  function handleClose() {\n    setShowLightBox(false)\n    setSelectedImage(null)\n  }\n\n  function handlePrevRequest() {\n\n  }\n\n  function handleNextRequest() {\n\n  }\n\n\n  return (\n    <Layout location={location}>\n      <Helmet title=\"Archive\" />\n\n      <main>\n        <header ref={revealTitle}>\n          <h1 className=\"big-heading\">Archive</h1>\n          <p className=\"subtitle\">A big list of things I’ve worked on</p>\n        </header>\n\n        <StyledTableContainer ref={revealTable}>\n          <table>\n            <thead>\n              <tr>\n                <th>Year</th>\n                <th>Title</th>\n                <th className=\"hide-on-mobile\">Made at</th>\n                <th className=\"hide-on-mobile\">Built with</th>\n                <th>Link</th>\n              </tr>\n            </thead>\n            <tbody>\n              {projects.length > 0 &&\n                projects.map(({ node }, i) => {\n                  const { frontmatter, html } = node;\n                  const {\n                    date,\n                    github,\n                    external,\n                    ios,\n                    android,\n                    title,\n                    tech,\n                    company,\n                    image\n                  } = frontmatter;\n                  return (\n                    <tr key={i} ref={el => (revealProjects.current[i] = el)}>\n                      <td className=\"overline year\">{`${new Date(date).getFullYear()}`}</td>\n\n                      <td className=\"title\">{title}</td>\n\n                      <td className=\"company hide-on-mobile\">\n                        {company ? <span>{company}</span> : <span>—</span>}\n                      </td>\n\n                      <td className=\"tech hide-on-mobile\">\n                        {tech.length > 0 &&\n                          tech.map((item, i) => (\n                            <span key={i}>\n                              {item}\n                              {''}\n                              {i !== tech.length - 1 && <span className=\"separator\">&middot;</span>}\n                            </span>\n                          ))}\n                      </td>\n\n                      <td className=\"links\">\n                        <div>\n                          {image && (\n                            <a onClick={() => setActiveImage({ image, title, description: html })} aria-label=\"Image Link\">\n                              <Icon name=\"Thumbnail\" />\n                            </a>\n                          )}\n                          {ios && (\n                            <a href={ios} aria-label=\"Apple App Store Link\">\n                              <Icon name=\"AppStore\" />\n                            </a>\n                          )}\n                          {android && (\n                            <a href={android} aria-label=\"Google Play Store Link\">\n                              <Icon name=\"PlayStore\" />\n                            </a>\n                          )}\n                          {external && (\n                            <a href={external} aria-label=\"External Link\">\n                              <Icon name=\"External\" />\n                            </a>\n                          )}\n                          {github && (\n                            <a href={github} aria-label=\"GitHub Link\">\n                              <Icon name=\"GitHub\" />\n                            </a>\n                          )}\n                        </div>\n                      </td>\n                    </tr>\n                  );\n                })}\n            </tbody>\n          </table>\n          {isShowLightBox && selectedImage !== null && (\n            <LightBox\n              image={selectedImage['image']}\n              imageTitle={selectedImage['title']}\n              imageCaption={<div dangerouslySetInnerHTML={{ __html: selectedImage['description'] }} />}\n              handleClose={handleClose}\n              handleNextRequest={handleNextRequest}\n              handlePrevRequest={handlePrevRequest}\n            />\n          )}\n        </StyledTableContainer>\n      </main>\n    </Layout>\n  );\n};\nArchivePage.propTypes = {\n  location: PropTypes.object.isRequired,\n  data: PropTypes.object.isRequired,\n};\n\nexport default ArchivePage;\n\nexport const pageQuery = graphql`\n  {\n    allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"/projects/\" } }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            date\n            title\n            tech\n            github\n            external\n            ios\n            android\n            company,\n            image {\n              childImageSharp {\n                gatsbyImageData(width: 700, placeholder: BLURRED, formats: [AUTO, WEBP, AVIF])\n              }\n            }\n          }\n          html\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}